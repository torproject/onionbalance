% ONIONBALANCE(1) Onionbalance User Manual
% Silvio Rhatto <rhatto@torproject.org>
% {date}

# NAME

Onionbalance - an Onion Service descriptor publisher that works as a load balancer

# SYNOPSIS

{usage}

# DESCRIPTION

Onionbalance allows load balancing Onion Services across multiple backend Tor
instances. This way the load of introduction and rendezvous requests gets
distributed across multiple hosts.

Onionbalance provides load-balancing while also making Onion Services more
resilient and reliable by eliminating single points-of-failure and by
protecting the main identity key.

Onionbalance allows for scaling across multiple Onion Service instances with no
additional software or Tor modifications necessary on the Onion Service
instance.

# FULL INVOCATION

{invocation}

# CONFIGURATION

The onionbalance-config(1) tool is the fastest way to generate the necessary keys
and config files to get your onion service up and running.

# CONFIGURATION FILE FORMAT

This is a sample configuration file that can be adapted:

{config}

The services section of the configuration file contains a list of main Onion
Services that Onionbalance is responsible for.

Each key option specifies the location of the 1024 bit private RSA key for the
onion service. This main private key determines the address that users will
use to access your onion service. This private key must be kept secure.

The location of the private key is evaluated as an absolute path, or relative
to the configuration file location.

You can use existing Tor onion service private key with Onionbalance to keep
your onion address.

Each backend Tor onion service instance is listed by its unique onion address
in the instances list.

NOTE:
:  You can replace backend instance keys if they get lost or compromised.
   Simply start a new backend onion service under a new key and replace the
   address in the config file.

If you have used the onionbalance-config tool you can simply use the generated
config file from master/config.yaml.

NOTE:
:  By default onionbalance will search for a config.yaml file in the current
   working directory.

# FILES

System-wide files, when running Onionbalance as a system service:

/etc/onionbalance/config.yaml
: The global configuration file, which contains services entries.

config.yaml
:   Fallback location for the configuration file, if
    /etc/onionbalance/config.yaml is not found.

Local configuration files, when running Onionbalance as a local, user service:

master/config.yaml
:  This is the configuration file that is used my the Onionbalance management
   server.

master/<ONION_ADDRESS>.key
:  The private key which will become the public address and identity for your
   onion service. It is essential that you keep this key secure.

master/torrc-server
:  A sample Tor configuration file which can be used with the Tor instance
   running on the management server (v2-only).

srv/torrc-instance
:  A sample Tor config file which contains the Tor HiddenService* options
   needed for your backend Tor instance (v2-only).

srv/<ONION_ADDRESS>/private_key
:  Directory containing the private key for your backend onion service
   instance.  This key is less critical as it can be rotated if lost or
   compromised (v2-only).

# RUNNING

You can start the Onionbalance management server once all of your backend onion
service instances are running.

You will need to create a configuration file which list the backend onion
services and the location of your hidden service keys.

    $ onionbalance -c config.yaml

or

    $ sudo service onionbalance start

The management server must be left running to publish new descriptors for your
onion service: in about 10 minutes you should have a fully functional
onionbalance setup.

NOTE:
:  Multiple Onionbalance management servers can be run simultaneously with
   the same master private key and configuration file to provide redundancy.

# ENVIRONMENT VARIABLES

ONIONBALANCE_CONFIG
:  Override the location for the Onionbalance configuration file.
   The loaded configuration file takes precedence over environment variables.
   Configuration file options will override environment variable which have the
   same name.

ONIONBALANCE_LOG_LEVEL
:  Specify the minimum verbosity of log messages to output. All log messages
   equal or higher the the specified log level are output. The available log
   levels are the same as the --verbosity command line option.

ONIONBALANCE_STATUS_SOCKET_LOCATION
:  The Onionbalance service creates a Unix domain socket which provides
   real-time information about the currently loaded service and descriptors. This
   option can be used to change the location of this domain socket. (default:
   /var/run/onionbalance/control)

ONIONBALANCE_TOR_CONTROL_SOCKET
:  The location of the Tor unix domain control socket. Onionbalance will
   attempt to connect to this control socket first before falling back to using a
   control port connection. (default: /var/run/tor/control)

# EXIT STATUS

Onionbalance is meant to be kept running in the background.

In case of unrecoverable errors, the exit status is 1.
Otherwise, the exit status is 0.

# LIMITATIONS

Onionbalance currently has the following limitations:

1. Only supports the legacy C Tor implementation.

2. Currently does not work along Tor's Proof of Work (PoW) defense for Onion
   Services.

3. For other limitations, check the list of issues available at the
   Onionbalance source code repository.

# AUTHOR

George Kadianakis, Donncha O'Cearbhaill, Silvio Rhatto <rhatto@torproject.org>

# SEE ALSO

The *docs/* folder distributed with Onionbalance contains the full documentation,
which should also be available at <https://onionservices.torproject.org/apps/web/onionbalance/>.

The Onionbalance source code and all documentation may be downloaded from
<https://gitlab.torproject.org/tpo/onion-services/onionbalance>.
