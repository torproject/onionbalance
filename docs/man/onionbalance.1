.\" Automatically generated by Pandoc 3.1.11.1
.\"
.TH "ONIONBALANCE" "1" "Apr 23, 2025" "Onionbalance User Manual" ""
.SH NAME
Onionbalance \- an Onion Service descriptor publisher that works as a
load balancer
.SH SYNOPSIS
onionbalance [\-h] [\[en]hs\-version {v3}] [\-i IP] [\-p PORT] [\-s
SOCKET] [\-c CONFIG] [\-v VERBOSITY] [\[en]version] [\[en]is\-testnet]
.SH DESCRIPTION
Onionbalance allows load balancing Onion Services across multiple
backend Tor instances.
This way the load of introduction and rendezvous requests gets
distributed across multiple hosts.
.PP
Onionbalance provides load\-balancing while also making Onion Services
more resilient and reliable by eliminating single points\-of\-failure
and by protecting the main identity key.
.PP
Onionbalance allows for scaling across multiple Onion Service instances
with no additional software or Tor modifications necessary on the Onion
Service instance.
.SH FULL INVOCATION
.IP
.EX
onionbalance [\-h] [\-\-hs\-version {v3}] [\-i IP] [\-p PORT] [\-s SOCKET]
                    [\-c CONFIG] [\-v VERBOSITY] [\-\-version] [\-\-is\-testnet]

onionbalance distributes the requests for a Tor hidden services across
multiple Tor instances.

options:
  \-h, \-\-help            show this help message and exit
  \-\-hs\-version {v3}     Onion service version (only v3 is supported)
  \-i, \-\-ip IP           Tor controller IP address
  \-p, \-\-port PORT       Tor controller port
  \-s, \-\-socket SOCKET   Tor unix domain control socket location
  \-c, \-\-config CONFIG   Config file location
  \-v, \-\-verbosity VERBOSITY
                        Minimum verbosity level for logging. Available in
                        ascending order: debug, info, warning, error,
                        critical). The default is info.
  \-\-version             show program\[aq]s version number and exit
  \-\-is\-testnet          Is this onionbalance on a test net? (Default: no)
.EE
.SH CONFIGURATION
The onionbalance\-config(1) tool is the fastest way to generate the
necessary keys and config files to get your onion service up and
running.
.SH CONFIGURATION FILE FORMAT
This is a sample configuration file that can be adapted:
.IP
.EX
# Onion Load Balancer Config File example
#
# Each Onion Service key line should be associated with a list of 0 or more
# instances which contain the onion address of the load balancing backend
# service.

services:
\- instances: # web
  \- address: wmilwokvqistssclrjdi5arzrctn6bznkwmosvfyobmyv2fc3idbpwyd.onion
    name: web1
  \- address: fp32xzad7wlnpd4n7jltrb3w3xyj23ppgsnuzhhkzlhbt5337aw2joad.onion
    name: web2
  key: lsainlbvqg6obox2xkcmlv65rlctarxzuzod4juicfj6cstmoimkxyyd.key
\- instances: # irc
  \- address: drdoqmg4p43tbtoqxuxs2ax2vgfpetqtvgnpdugh5b2i7f7zxrzvy7id.key
    name: irc1
  \- address: u6uoeftsysttxeheyxtgdxssnhutmoo2y2rw6igh5ez4hpxaz4dap7ad.onion
    name: irc2
  key: 6kjmifbfmd2232gpsu7am2psp2ydennc4zhq53zcwlirps5jmpnaikyd.key
.EE
.PP
The services section of the configuration file contains a list of main
Onion Services that Onionbalance is responsible for.
.PP
Each key option specifies the location of the 1024 bit private RSA key
for the onion service.
This main private key determines the address that users will use to
access your onion service.
This private key must be kept secure.
.PP
The location of the private key is evaluated as an absolute path, or
relative to the configuration file location.
.PP
You can use existing Tor onion service private key with Onionbalance to
keep your onion address.
.PP
Each backend Tor onion service instance is listed by its unique onion
address in the instances list.
.TP
NOTE:
You can replace backend instance keys if they get lost or compromised.
Simply start a new backend onion service under a new key and replace the
address in the config file.
.PP
If you have used the onionbalance\-config tool you can simply use the
generated config file from master/config.yaml.
.TP
NOTE:
By default onionbalance will search for a config.yaml file in the
current working directory.
.SH FILES
System\-wide files, when running Onionbalance as a system service:
.TP
/etc/onionbalance/config.yaml
The global configuration file, which contains services entries.
.PP
Local configuration files, when running Onionbalance as a local, user
service:
.TP
config/config.yaml
This is the configuration file that is used by the Onionbalance
management server.
.TP
config/ONION_ADDRESS.key
Each service instance have a private key, which will be derived into the
public address and identity for the Onion Service.
Each private key file is named after the .onion address, so
ONION_ADDRESS.key will be actually like
dpkhemrbs3oiv2fww5sxs6r2uybczwijzfn2ezy2osaj7iox7kl7nhad.key.
It is essential that you keep these files secure.
.SH RUNNING
You can start the Onionbalance management server once all of your
backend onion service instances are running.
.PP
You will need to create a configuration file which list the backend
onion services and the location of your hidden service keys.
.IP
.EX
$ onionbalance \-c config.yaml
.EE
.PP
or
.IP
.EX
$ sudo service onionbalance start
.EE
.PP
The management server must be left running to publish new descriptors
for your onion service: in about 10 minutes you should have a fully
functional onionbalance setup.
.TP
NOTE:
Multiple Onionbalance management servers can be run simultaneously with
the same master private key and configuration file to provide
redundancy.
.SH ENVIRONMENT VARIABLES
.TP
ONIONBALANCE_CONFIG
Override the location for the Onionbalance configuration file.
The loaded configuration file takes precedence over environment
variables.
Configuration file options will override environment variable which have
the same name.
.TP
ONIONBALANCE_LOG_LEVEL
Specify the minimum verbosity of log messages to output.
All log messages equal or higher the the specified log level are output.
The available log levels are the same as the \[en]verbosity command line
option.
.TP
ONIONBALANCE_STATUS_SOCKET_LOCATION
The Onionbalance service creates a Unix domain socket which provides
real\-time information about the currently loaded service and
descriptors.
This option can be used to change the location of this domain socket.
(default: /var/run/onionbalance/control)
.TP
ONIONBALANCE_TOR_CONTROL_SOCKET
The location of the Tor unix domain control socket.
Onionbalance will attempt to connect to this control socket first before
falling back to using a control port connection.
(default: /var/run/tor/control)
.SH EXIT STATUS
Onionbalance is meant to be kept running in the background.
.PP
In case of unrecoverable errors, the exit status is 1.
Otherwise, the exit status is 0.
.SH LIMITATIONS
Onionbalance currently has the following limitations:
.IP "1." 3
Only supports the legacy C Tor implementation.
.IP "2." 3
Currently does not work along Tor\[cq]s Proof of Work (PoW) defense for
Onion Services.
.IP "3." 3
For other limitations, check the list of issues available at the
Onionbalance source code repository.
.SH AUTHOR
George Kadianakis, Donncha O\[cq]Cearbhaill, Silvio Rhatto \c
.MT rhatto@torproject.org
.ME \c
.SH SEE ALSO
The \f[I]docs/\f[R] folder distributed with Onionbalance contains the
full documentation, which should also be available at \c
.UR https://onionservices.torproject.org/apps/web/onionbalance/
.UE \c
\&.
.PP
The Onionbalance source code and all documentation may be downloaded
from \c
.UR https://gitlab.torproject.org/tpo/onion-services/onionbalance
.UE \c
\&.
.SH AUTHORS
Silvio Rhatto \c
.MT rhatto@torproject.org
.ME \c.
